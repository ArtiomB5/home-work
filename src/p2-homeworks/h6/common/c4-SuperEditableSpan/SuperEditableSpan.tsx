import React, {
  DetailedHTMLProps,
  InputHTMLAttributes,
  HTMLAttributes,
  useState
} from 'react'
import SuperInputText from '../../../h4/common/c1-SuperInputText/SuperInputText'


// —Ç–∏–ø –ø—Ä–æ–ø—Å–æ–≤ –æ–±—ã—á–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞
type DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>
// —Ç–∏–ø –ø—Ä–æ–ø—Å–æ–≤ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∞–Ω–∞
type DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>

// –∑–¥–µ—Å—å –º—ã –≥–æ–≤–æ—Ä–∏–º —á—Ç–æ —É –Ω–∞—à–µ–≥–æ –∏–Ω–ø—É—Ç–∞ –±—É–¥—É—Ç —Ç–∞–∫–∏–µ –∂–µ –ø—Ä–æ–ø—Å—ã –∫–∞–∫ —É –æ–±—ã—á–Ω–æ–≥–æ –∏–Ω–ø—É—Ç–∞
// (—á—Ç–æ–± –Ω–µ –ø–∏—Å–∞—Ç—å value: string, onChange: ...; –æ–Ω–∏ —É–∂–µ –≤—Å–µ –æ–ø–∏—Å–∞–Ω—ã –≤ DefaultInputPropsType)
type SuperEditableSpanType = DefaultInputPropsType & { // –∏ + –µ—â—ë –ø—Ä–æ–ø—Å—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –∏–Ω–ø—É—Ç–µ
  onChangeText?: (value: string) => void
  onEnter?: () => void
  error?: string
  spanClassName?: string

  spanProps?: DefaultSpanPropsType // –ø—Ä–æ–ø—Å—ã –¥–ª—è —Å–ø–∞–Ω–∞
}

const SuperEditableSpan: React.FC<SuperEditableSpanType> = (
  {
    autoFocus, // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–ø—Å–∞
    onBlur,
    onEnter,
    spanProps,

    ...restProps// –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –ø–æ–ø–∞–¥—É—Ç –≤ –æ–±—ä–µ–∫—Ç restProps
  }
) => {
  const [editMode, setEditMode] = useState<boolean>(false)
  const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}
  const [editMsg, setEditMsg] = useState(false);

  const onEnterCallback = () => {
    // setEditMode() // –≤—ã–∫–ª—é—á–∏—Ç—å editMode –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    setEditMode(false);
    onEnter && onEnter()
  }
  const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {
    // setEditMode() // –≤—ã–∫–ª—é—á–∏—Ç—å editMode –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∏–Ω–ø—É—Ç–∞
    setEditMode(false);
    onBlur && onBlur(e)
  }
  const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {
    // setEditMode() // –≤–∫–ª—é—á–∏—Ç—å editMode –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ
    setEditMode(true);
    onDoubleClick && onDoubleClick(e);
  }

  const spanStyle = {
    margin: '15px 80px 15px 15px',
    borderBottom: '1px solid #2f2d25'
  }

  const spanClassName = `${'x'} ${className}`

  const mouseOverHandler = () => {
    setEditMsg(true);
  }

  const mouseLeaveHandler = () => {
    setEditMsg(false)
  }

  const SpanInputInfo = () => {
    return (
      <span>
              <span onMouseOver={mouseOverHandler}
                    onMouseLeave={mouseLeaveHandler}
              >
                üí°
            </span>
        {editMode ?
          <span>{editMsg ? 'To complete the text input, press the Enter key or click in an empty place on the page.' : ''}</span>
          :
          <span>{editMsg ? 'Double-click to change the text.' : ''}</span>
        }

      </span>
    )
  }

  return (
    <>
      <span>
        {editMode
          ? (
            <SuperInputText
              autoFocus // –ø—Ä–æ–ø—Å—É —Å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å true
              onBlur={onBlurCallback}
              onEnter={onEnterCallback}

              {...restProps} // –æ—Ç–¥–∞—ë–º –∏–Ω–ø—É—Ç—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (value –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–º –≤–Ω—É—Ç—Ä–∏)
            />
          ) : (
            <span
              onDoubleClick={onDoubleClickCallBack}
              className={spanClassName}
              style={spanStyle}
              {...restSpanProps}
            >
                        {/*–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ø–∞–Ω–∞, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞*/}
              {children || restProps.value}
            </span>
          )
        }
      </span>
      <SpanInputInfo/>
    </>
  )
};

export default SuperEditableSpan
